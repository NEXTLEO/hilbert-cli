Version: 0.6.0 # 0.MAJOR.MINOR, later: MAJOR.MINOR

Services: # file: docker-compose.yml,
  s_omd_agent: { type: compose, file: docker-compose.yml, ref: omd_agent, auto_detections: 'export HB_URL=${HILBERT_HEARTBEAT_URL}' }
  s_omd_anew:  { type: compose, file: docker-compose.yml, ref: omd_anew, auto_detections: '' }
  s_omd_persistent: { type: compose, file: docker-compose.yml, ref: omd_persistent, auto_detections: 'export OMD=${HILBERT_OMD_PATH}' }
  s_ptmx:      { type: compose, file: docker-compose.yml, ref: ptmx, auto_detections: '' }
  s_registry:  { type: compose, file: docker-compose.yml, ref: registry, auto_detections: '' }
  s_mng:       { type: compose, file: docker-compose.yml, ref: mng, auto_detections: '' }
  s_qrhandler: { type: compose, file: docker-compose.yml, ref: qrhandler, auto_detections: '' }

Applications:
  a_hb_test:
    type: compose
    ref: hb_test
    file: docker-compose.yml
    auto_detections: 'export HB_URL=${HILBERT_HEARTBEAT_URL}'
    name: HB-Test
    description: Random HB testing
    compatibleStations: { server, simple }

  a_kiosk:
    type: compose
    ref: kiosk
    file: docker-compose.yml
    auto_detections: 'export HB_URL=${HILBERT_HEARTBEAT_URL}'
    name: Kiosk with HB
    description: Kiosk Web Browser GUI app
    compatibleStations: { server, simple }

Profiles:
  standalone:  # TODO: FIXME: this should not be required!
    services: []
    description: Generic Networking, without SSH & Docker & OMD agent.
    name: standalone
    supported_types: []

  server:
    services: [ s_ptmx, s_omd_agent, s_omd, s_registry ]  # , mng
    description: Only for Server System
    name: server
    supported_types: [ compose ]

  simple:
    services: [ s_ptmx, s_omd_agent ]
    description: Any Linux station without QR Scanner
    name: simple
    supported_types: [ compose ]

  std:
    services: [ s_ptmx, s_omd_agent, s_qrhandler ]
    description: Linux station with QR Scanner and Display
    name: standard
    supported_types: [ compose ]


Stations:
  station_defaults: # fake station: only used to share default settings
    type: hidden
    name: hidden default station
    description: Not a real station - Just hidden default settings
    profile: standalone  # TODO: FIXME: this should not be required!
    omd_tag: standalone
    address: Problematic.SSH.Alias  # TODO: NOTE: should not be mandatory!
    hidden: true # hide on Dashboard    # to be removed due to station.type
    client_settings:
      hilbert_autostart: true # Station starts Hilbert upon booting
      hilbert_autostart_delay: 20 # â€¦ with this delay in [sec]
      HILBERT_PREFERRED_LANGUAGE: de
      HILBERT_HEARTBEAT_URL: http://127.0.0.1:8888
      HILBERT_CUPS_SERVER: printer1.public.supernova:631
      HILBERT_HIDE_MOUSE_CURSOR: 1
      HILBERT_ALSA_CARD: 1
      HILBERT_CUSTOMIZATIONS: nv,alsa

  server:
    type: server
    extends: station_defaults
    hidden: false  # to be removed due to station.type
    description: 'Server Station: Supernova'
    name: Supernova Server
    address: localhost
    profile: server
    omd_tag: agent
    client_settings:
      hilbert_autostart_delay: 0 # no delay before starting Hilbert here
      HILBERT_SERVER_CONFIG_PATH: '${HOME}/.config/hilbert-server/' # where to keep sync'ed content
      HILBERT_OMD_PATH: '${HOME}/.config/hilbert-omd/' # persistent storage for OMD
      HILBERT_REGISTRY_DATA_PATH: '${HOME}/.config/hilbert-registry-data/' # persistent storage for docker registry

  station:
    type: standard
    extends: station_defaults
    hidden: false  # to be removed due to station.type
    address: localhost
    description: 'Testing Station'
    name: 'Station: Test Standard'
    omd_tag: agent
    profile: simple
    poweron_settings: { type: WOL, mac: '3c:18:a0:04:e6:c2', auto_turnon: true }
    client_settings:
      hilbert_autostart_delay: 10 # 10 sec. delay before starting here Hilbert-CLI-Station
      hilbert_station_default_application: a_hb_test

